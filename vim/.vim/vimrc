set nocompatible " get rid of Vi compatibility mode. SET FIRST!

" Enable completion where available.
" This setting must be set before ALE is loaded.
let g:ale_completion_enabled = 1

" Automatic installation vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" vim-plug configuration

call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'           " Shows diff line by line
Plug 'ajh17/VimCompletesMe'             " Tab-completion
Plug 'altercation/vim-colors-solarized' " Color-scheme
Plug 'alvan/vim-closetag'               " Closes html and xml tags
Plug 'dbeniamine/todo.txt-vim'          " Todo-txt
Plug 'godlygeek/tabular'                " Lines up code
Plug 'itchyny/lightline.vim'            " Statusbar
Plug 'junegunn/fzf.vim'                 " Quicker searching
Plug 'kopischke/vim-stay'               " Remembers cursor locations in buffers
Plug 'ntpeters/vim-better-whitespace'   " Highlights extraneous whitespace
Plug 'qpkorr/vim-renamer'               " Bulk rename in vim
Plug 'raimondi/delimitMate'             " Closes parens, hyphens etc
Plug 'sheerun/vim-polyglot'             " Lots of more syntax highlighting
Plug 'tpope/vim-commentary'             " Comment and uncomment
Plug 'tpope/vim-endwise'                " Completes with end in ruby and sh
Plug 'tpope/vim-repeat'                 " Allows repetition (with .) for plugin commands
Plug 'tpope/vim-sensible'               " Sensible standards
Plug 'tpope/vim-surround'               " Operate on surrounding characters
Plug 'vim-pandoc/vim-pandoc'            " Pandoc functionality in Vim and markdown functions
Plug 'vim-pandoc/vim-pandoc-syntax'     " Pandoc markdown highlighting
Plug 'w0rp/ale'                         " Linter
Plug 'wincent/terminus'                 " Enhances vim + terminal integration eg cursor shapes etc

call plug#end()

set ffs=unix,dos,mac        " Use Unix as the standard file type
set t_Co=256                " enable 256-color mode.

syntax enable               " enable syntax highlighting (previously syntax on).

" gVIM
set guioptions=g

" COLORS
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

" TABS
set tabstop=4               " number of visual spaces per TAB
set softtabstop=4           " number of spaces in tab when editing
set shiftwidth=4
set expandtab               " tabs are spaces

set cindent                 " Automatic program indenting
set cinkeys-=0#             " Comments don't fiddle with indenting
set cino=                   " See :h cinoptions-values
set copyindent              " Make autoindent use the same chars as prev line

" General UI
set number
set showcmd                 " show command in bottom bar
set cursorline              " highlight current line
set cursorcolumn            " highlight current column
filetype indent on          " load filetype-specific indent files
set wildmenu                " visual autocomplete for command menu
set lazyredraw              " redraw only when we need to.
set showmatch               " highlight matching [{()}]
set ruler                   " Always show info along bottom.
set wrap                    " Wrap lines
set textwidth=0             " No automatic breaks
set linebreak               " Break long lines by word, not char

" SEARCH
set incsearch               " search as characters are entered
set hlsearch                " highlight matches
set ignorecase              " Make searches case-insensitive.

" FOLDING
set foldenable                    " enable folding
set foldlevelstart=10             " open most folds by default
set foldnestmax=10                " 10 nested fold max
set foldmethod=indent             " fold based on indent level
au BufWinLeave ?* mkview          " save folds on exit
au BufWinEnter ?* silent loadview " load folds on open

" space open/closes folds
nnoremap <space> za

" CLIPBOARD
set clipboard=unnamedplus

" SPELLCHECK
set rtp+=/usr/share/vim/vimfiles/
set rtp+=~/.vim/spell/

set spell spl=sv,en " Select language
set nospell " Turn it off at start
nmap <F7> :set spell! <CR>

" mkspell if needed
for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        exec 'mkspell! ' . fnameescape(d)
    endif
endfor

" No undercurls thanks
hi SpellBad ctermfg=117 ctermbg=203 guifg=#8ac6f2 guibg=#e5786d
hi SpellCap ctermfg=240 ctermbg=180 guifg=#585858 guibg=#cae682
hi SpellRare ctermfg=203 ctermbg=117 guifg=#e5786d guibg=#8ac6f2
hi SpellLocal ctermfg=252 ctermbg=235 guifg=#d0d0d0 guibg=#242424

" MOVEMENT
" move vertically by visual line
nnoremap j gj
nnoremap k gk

" BUFFERS AND FILES

" Open last file edited
nmap <C-e> :e#<CR>

" Move between open buffers.
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" BACKUP off
set nobackup
set nowb
set noswapfile

" Built in fuzzy find from https://github.com/mcantor/no_plugins
set path+=**
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
" - Use :b and type in unique part of path and enter to open up file in buffer

" Tweaks for netrw (file-browser) from https://github.com/mcantor/no_plugins
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()

" AUTOCOMPLETE
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option
" - ^p prev suggestion

" From :help ins-completion
function! CleverTab()
    if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
      return "\<Tab>"
   else
      return "\<C-N>"
    endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

" Save with sudo
command! -nargs=0 Sw w !sudo tee % > /dev/null

" Enter and backspaces moves through paragraphs in normal mode
nnoremap <BS> {
onoremap <BS> {
vnoremap <BS> {

nnoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
onoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
vnoremap <CR> }

" Splits https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally

" Remaps split movement to CTRL + hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Open splits to the right and below
set splitbelow
set splitright

" PLUGINS

let g:pandoc#folding#fold_yaml=1
let g:pandoc#folding#fdc=0

" For any plugins that use this, make their keymappings use comma
let mapleader = ","
let maplocalleader = ","

" Cucumbertables.vim (from https://gist.github.com/tpope/287147)
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
        Tabularize/|/l1
        normal! 0
        call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
      endif
endfunction

" FZF (replaces Ctrl-P, FuzzyFinder and Command-T)
set rtp+=/usr/bin/fzf
set rtp+=~/.fzf
nmap ; :Buffers<CR>
nmap <Leader>t :Tags<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>a :Ag<CR>

" GitGutter styling to use · instead of +/-
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" ALE
let b:ale_fixers = {
            \ '*': ['remove_trailing_lines', 'trim_whitespace'],
            \ 'html': ['tidy']
            \}

" Lightline
let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'active': {
\   'left': [['mode', 'paste'], ['filename', 'modified']],
\   'right': [['lineinfo'], ['percent', 'wordcount'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_function': {
\   'wordcount': 'WordCount',
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ }

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

function! WordCount()
    " https://gist.github.com/cormacrelf/d0bee254f5630b0e93c3
    let currentmode = mode()
    if !exists("g:lastmode_wc")
        let g:lastmode_wc = currentmode
    endif
    " if we modify file, open a new buffer, be in visual ever, or switch modes
    " since last run, we recompute.
    if &modified || !exists("b:wordcount") || currentmode =~? '\c.*v' || currentmode != g:lastmode_wc
        let g:lastmode_wc = currentmode
        let l:old_position = getpos('.')
        let l:old_status = v:statusmsg
        execute "silent normal g\<c-g>"
        if v:statusmsg == "--No lines in buffer--"
            let b:wordcount = 0
        else
            let s:split_wc = split(v:statusmsg)
            if index(s:split_wc, "Selected") < 0
                let b:wordcount = str2nr(s:split_wc[11])
            else
                let b:wordcount = str2nr(s:split_wc[5])
            endif
            let v:statusmsg = l:old_status
        endif
        call setpos('.', l:old_position)
        return b:wordcount
    else
        return b:wordcount
    endif
endfunction
