set nocompatible " get rid of Vi compatibility mode. SET FIRST!

" Automatic installation vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let g:ale_completion_enabled = 0
let g:jedi#completions_enabled = 0 
" let g:deoplete#enable_at_startup = 1

" vim-plug configuration

call plug#begin('~/.vim/plugged')
"
"" COMPLETION
let g:python3_host_prog='/home/tetov/.virtualenvs/nvim/bin/python'
Plug 'ncm2/ncm2'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'roxma/nvim-yarp'

" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()

" IMPORTANT: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect

Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'
Plug 'wellle/tmux-complete.vim'

set shortmess+=c

" GENERAL
Plug 'alvan/vim-closetag'                " Closes html and xml tags
Plug 'editorconfig/editorconfig-vim'     " project specific editor settings
Plug 'ervandew/supertab'                 " Maps tab in various ways
Plug 'godlygeek/tabular'                 " Lines up code
Plug 'junegunn/fzf.vim'                  " Quicker searching
Plug 'ntpeters/vim-better-whitespace'    " Highlights extraneous whitespace
Plug 'Konfekt/fastfold'                  " Apparently folds are slow?
Plug 'kopischke/vim-stay'                " Remembers cursor locations in buffers
Plug 'raimondi/delimitMate'              " Closes parens, hyphens etc
Plug 'sheerun/vim-polyglot'              " Lots of more syntax highlighting
Plug 'tmux-plugins/vim-tmux-focus-events' " For shared vim tmux clipboard
Plug 'tpope/vim-commentary'              " Comment and uncomment
Plug 'tpope/vim-repeat'                  " Allows repetition (with .) for plugin commands
Plug 'tpope/vim-sensible'                " Sensible standards
Plug 'tpope/vim-endwise'                 " Completes with end in ruby and sh
Plug 'tpope/vim-sleuth'                  " Guess tab width
Plug 'tpope/vim-surround'                " Operate on surrounding characters
Plug 'tpope/vim-vinegar'                 " netrw as proj browser

" UTILITY
Plug 'dbeniamine/todo.txt-vim'           " Todo-txt
Plug 'qpkorr/vim-renamer'                " Bulk rename in vim
Plug 'samoshkin/vim-mergetool'           " Mergetool

" UI
Plug 'airblade/vim-gitgutter'            " Shows diff line by line
Plug 'altercation/vim-colors-solarized'  " Color-scheme
Plug 'itchyny/lightline.vim'             " Statusbar
Plug 'jeffkreeftmeijer/vim-numbertoggle' " Relative numbers when it makes sense
Plug 'maximbaz/lightline-ale'            " ALE status for lightline
Plug 'mengelbrecht/lightline-bufferline' " Show list of buffers in lightline
Plug 'wincent/terminus'                  " Enhances vim + terminal integration eg cursor shapes etc

" LINT
Plug 'dense-analysis/ale'                          " Linter

" MOVEMENT
Plug 'bkad/CamelCaseMotion'
Plug 'easymotion/vim-easymotion'         " double leader then movement

" GIT
Plug 'ncm2/ncm2-github'
Plug 'tpope/vim-fugitive'                " Git
Plug 'tpope/vim-rhubarb'                 " Github plugin for fugitive

" SNIPPETS
Plug 'honza/vim-snippets'                " Collection of snippets
Plug 'ncm2/ncm2-ultisnips'
Plug 'SirVer/ultisnips'                  " Snippet engine

" PYTHON
Plug 'alfredodeza/coveragepy.vim'        " Show coverage.py report and mark lines
Plug 'davidhalter/jedi-vim'
Plug 'jmcantrell/vim-virtualenv'           " Make vim use venv
Plug 'ncm2/ncm2-jedi'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'tmhedberg/simpylfold'              " Folding for Python

" MARKDOWN ETC
Plug 'vim-pandoc/vim-pandoc'             " Pandoc functionality in Vim and markdown functions
Plug 'vim-pandoc/vim-pandoc-syntax'      " Pandoc markdown highlighting

call plug#end()

set ffs=unix,dos,mac        " Use Unix as the standard file type
set t_Co=256                " enable 256-color mode.

syntax enable               " enable syntax highlighting (previously syntax on).

" gVIM
set guioptions=g

" COLORS
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

" TABS
set tabstop=4               " number of visual spaces per TAB
set softtabstop=4           " number of spaces in tab when editing
set shiftwidth=4
set expandtab               " tabs are spaces

set cindent                 " Automatic program indenting
set cinkeys-=0#             " Comments don't fiddle with indenting
set cino=                   " See :h cinoptions-values
set copyindent              " Make autoindent use the same chars as prev line

" General UI
set number relativenumber   " Show relative number and normal number.
set showcmd                 " show command in bottom bar
set cursorline              " highlight current line
set cursorcolumn            " highlight current column
filetype indent on          " load filetype-specific indent files
set wildmenu                " visual autocomplete for command menu
set lazyredraw              " redraw only when we need to.
set showmatch               " highlight matching [{()}]
set ruler                   " Always show info along bottom.
set wrap                    " Wrap lines
set textwidth=0             " No automatic breaks
set linebreak               " Break long lines by word, not char
set scrolloff=20            " Lines to keep visible below and above
set colorcolumn=80          " Visual marker at col 80

" SEARCH
set incsearch               " search as characters are entered
set hlsearch                " highlight matches
set ignorecase              " Make searches case-insensitive.

" FOLDING
set foldenable                    " enable folding
set foldlevelstart=10             " open most folds by default
set foldnestmax=10                " 10 nested fold max
set foldmethod=indent             " fold based on indent level
let g:markdown_folding=1
au BufWinLeave ?* mkview          " save folds on exit
au BufWinEnter ?* silent loadview " load folds on open

" space open/closes folds
nnoremap <space> za

" Load project specific vimrc
set exrc

" CLIPBOARD
" from https://vi.stackexchange.com/a/16114
let s:clip = '/c/Windows/System32/clip.exe'
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * call system('echo '.shellescape(join(v:event.regcontents, "\<CR>")).' | '.s:clip)
    augroup END
end

noremap "p :exe 'norm a'.system('/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command Get-Clipboard')<CR>

" SPELLCHECK
set rtp+=/usr/share/vim/vimfiles/
set rtp+=~/.vim/spell/

set spell spl=sv,en " Select language
set nospell " Turn it off at start
nmap <F7> :set spell! <CR>

" mkspell if needed
for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        exec 'mkspell! ' . fnameescape(d)
    endif
endfor

" No undercurls thanks
hi SpellBad ctermfg=117 ctermbg=203 guifg=#8ac6f2 guibg=#e5786d
hi SpellCap ctermfg=240 ctermbg=180 guifg=#585858 guibg=#cae682
hi SpellRare ctermfg=203 ctermbg=117 guifg=#e5786d guibg=#8ac6f2
hi SpellLocal ctermfg=252 ctermbg=235 guifg=#d0d0d0 guibg=#242424

" MOVEMENT
" move vertically by visual line
nnoremap j gj
nnoremap k gk

" BUFFERS AND FILES

" Open last file edited
nmap <C-e> :e#<CR>

" Move between open buffers.
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" BACKUP off
set nobackup
set nowb
set noswapfile

" Built in fuzzy find from https://github.com/mcantor/no_plugins
set path+=**

" Tweaks for netrw (file-browser) from https://github.com/mcantor/no_plugins
let g:netrw_banner=0        " disable annoying banner
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_winsize = 25

" Enter and backspaces moves through paragraphs in normal mode
nnoremap <BS> {
onoremap <BS> {
vnoremap <BS> {

nnoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
onoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
vnoremap <CR> }

" Splits https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally

" Remaps split movement to CTRL + hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Open splits to the right and below
set splitbelow
set splitright

" PLUGINS

" CamelCaseMotion
let g:camelcasemotion_key = '<leader>'

" Snippets
let g:ultisnips_python_style="numpy"
let g:ultisnips_python_quoting_style="double"

" For any plugins that use this, make their keymappings use comma
let mapleader = ","
let maplocalleader = ","

let g:jedi#use_splits_not_buffers = "right"

" SuperTab

let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"

"Pandoc
" make markdown files not appears as pandoc files to w0rp/ale
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]

let g:pandoc#folding#fold_yaml=1
let g:pandoc#folding#fdc=0

" Cucumbertables.vim (from https://gist.github.com/tpope/287147)
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
        Tabularize/|/l1
        normal! 0
        call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
      endif
endfunction

" FZF (replaces Ctrl-P, FuzzyFinder and Command-T)
set rtp+=/usr/bin/fzf
set rtp+=~/.fzf
nmap ; :Buffers<CR>
nmap <Leader>t :Tags<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>a :Rg<CR>
nnoremap <C-p> :Files<Cr>

" Python
autocmd FileType python setlocal indentkeys-=<:>
autocmd FileType python setlocal indentkeys-=:

" ALE
" set omnifunc=ale#completion#OmniFunc

let g:ale_fixers = {
    \ '*': ['remove_trailing_lines', 'trim_whitespace'],
    \ 'css': ['prettier', 'stylelint'],
    \ 'html': ['tidy'],
    \ 'python': ['isort', 'black']
\}
let g:ale_linters = {
    \ 'pandoc': ['alex', 'markdownlint', 'mdl', 'prettier', 'proselint', 'redpen', 'remark-lint', 'textlint', 'vale', 'write-good'],
    \ 'python': ['flake8', 'mypy', 'pydocstyle']
\}

nmap ]a :ALENextWrap<CR>
nmap [a :ALEPreviousWrap<CR>
nmap ]A :ALELast
nmap [A :ALEFirst
nmap <F8> <Plug>(ale_fix)

" Lightline
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [
    \     ['mode', 'paste'],
    \     ['venv', 'gitbranch', 'filename', 'modified']
    \   ],
    \   'right': [
    \     ['lineinfo'],
    \     ['percent', 'wordcount'],
    \     [ 'fileformat', 'fileencoding', 'filetype'],
    \     ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok, linter_checking']
    \   ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \   'venv': 'virtualenv#statusline'
    \ },
    \ 'component_expand': {
    \   'buffers': 'lightline#bufferline#buffers',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \   'linter_checking': 'lightline#ale#checking',
    \ },
    \ 'component_type': {
    \   'buffers': 'tabsel',
    \   'readonly': 'error',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok' : 'left',
    \   'linter_checking': 'left',
    \ },
\}

" Todo.txt
" Auto complete projects
au filetype todo imap <buffer> + +<C-X><C-O>

" Auto complete contexts
au filetype todo imap <buffer> @ @<C-X><C-O>

function! WordCount()
    " https://gist.github.com/cormacrelf/d0bee254f5630b0e93c3
    let currentmode = mode()
    if !exists("g:lastmode_wc")
        let g:lastmode_wc = currentmode
    endif
    " if we modify file, open a new buffer, be in visual ever, or switch modes
    " since last run, we recompute.
    if &modified || !exists("b:wordcount") || currentmode =~? '\c.*v' || currentmode != g:lastmode_wc
        let g:lastmode_wc = currentmode
        let l:old_position = getpos('.')
        let l:old_status = v:statusmsg
        execute "silent normal g\<c-g>"
        if v:statusmsg == "--No lines in buffer--"
            let b:wordcount = 0
        else
            let s:split_wc = split(v:statusmsg)
            if index(s:split_wc, "Selected") < 0
                let b:wordcount = str2nr(s:split_wc[11])
            else
                let b:wordcount = str2nr(s:split_wc[5])
            endif
            let v:statusmsg = l:old_status
        endif
        call setpos('.', l:old_position)
        return b:wordcount
    else
        return b:wordcount
    endif
endfunction

" Disables unsafe commands in project vimrcs
set secure
