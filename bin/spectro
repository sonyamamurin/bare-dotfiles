#!/usr/bin/env bash
#Thanks to: nameisbrian2 for aesthetic inspiration, takeyourhatoff for the original script, sonyamamurin for bugs etc, people in the thread who posted bugs, cakewizard for sha suggestion, #code and #bash for general help
#TODO: Github page!
#TODO: Allow user/album option for imgur, copy https://github.com/moraesgp/imgur_bash_uploader/blob/master/upload_image.sh
#changelog: Added option to create url links for spectrals instead of embedded images
#changelog: general cleanup, remove duplicated parts, add a function
#changelog: title now varies based on whether or not it's zoomed and check_sha variable
#changelog: add sha1 info on the output + image title if the option is set (check_sha)
#changelog: allow wav files as input, since sox can handle them too
#changelog: remove the mp3->wav decoding step, sox can handle mp3
#changelog: shopt -s extglob for compatibility with older bash versions (where it's not default)
#changelog: Modified sed option to use -E instead of -r for compatibilty with BSD's sed
#changelog: made zoom/optipng options/arguments reverse the setting instead of setting a specific value
#changelog: added line to make local=1 a permenanent setting
#changelog: shorter/cleaner filenames in local mode
#changelog: modified the way it looks at directories to make it more compatible with other systems (OS X)

trap 'exit' ERR
shopt -s nullglob
shopt -s extglob
shopt -s globstar

# Check for dependencies
command -v sox >/dev/null 2>&1 || { echo >&2 "This script requires SoX but it's not installed. Aborting."; exit 1; }
command -v curl >/dev/null 2>&1 || { echo >&2 "This script requires curl but it's not installed. Aborting."; exit 1; }

# Public one:
apikey="6bf8cf819aff12a"

# Set offline=1 if you want to create local spectrals by default
# Can be reversed with the -l, --local flag
offline=

# Set optipng=1 if you wish to use it by default
# Can be reversed with the -o, --optipng flag
optipng=1

# Set sha_check=1 if you wish to add SHA info to the output (uses shasum)
# Can be reversed with the -s, --sha flag
check_sha=

# Set text_only=1 if you wish to display the spectrals as a link, with the filename as clickable source
# Can be reversed with the -t, --text flag
text_only=1

# This will center the text for the title in spectrals if using the [img]spectral[/img] method
if ! [[ "$text_only" == "1" ]]; then
  align_in="[align=center]"
  align_out="[/align]"
fi

if [[ "$check_sha" == "1" ]]; then
  command -v shasum >/dev/null 2>&1 || check_sha=0
fi

# Local directory where files will be stored (should be inside your public_html folder) when using -l, --local:
# Do NOT use a trailing slash
localdir="${HOME}"/www/"$(whoami)"."$(hostname -f)"/public_html/nani

# URL format (example: http://yoursite.com/spectro/) for the -l, --local flag
# Do NOT use a trailing slash
urlformat=https://"$(hostname -f)"/"$(whoami)"/nani

show_help () {
  echo
  echo "Usage:"
  echo "    spectro <input>"
  echo "Input can be individual files (mp3, wav or flac) or a directory."
  echo
  echo "Options:"
  echo "    -d, --double    Take both zoomed in and full image for each file"
  echo "    -h, --help      Show this help and exit"
  echo "    -l, --local     Reverse the setting to output the spectrograms locally"
  echo "    -t, --text      Reverse the setting to use [url] tags or [img]"
  echo "    -o, --optipng   Reverse the optipng option set in the script"
  echo "    -p, --parallel  Play nicely with parallel (example below)"
  echo "    -s, --sha       Reverse the check_sha option (to show SHA value)"
  echo "    -z, --zoom      Create only zoomed in screenshot (3 seconds)"
  echo
  echo "Example: spectro -ol DirectoryWithMusic/"
  echo
  echo "Modify the first lines on the script to modify change the settings"
  echo
  echo "To process a directory with GNU parallel, first cd into it and then run:"
  echo 'printf "[hide=Spectrograms][size=3]" && ls | parallel -k spectro -p; echo "[/size][/hide]"'
  echo
}

sox_arguments=("-n remix 1 spectrogram -x 3000 -y 513 -z 120 -w Kaiser")

while :; do
  case $1 in
    -d|--double)
      sox_arguments+=( "-n remix 1 spectrogram -x 500 -y 1025 -z 120 -w Kaiser -S 0:25 -d 0:04" )
      ;;
    -h|-\?|--help)   # Call a "show_help" function to display a synopsis, then exit.
      show_help
      exit
      ;;
    -l|--local)
      offline=$((!offline))
      ;;
    -t|--text)
      text_only=$((!text_only))
      ;;
    -o|--optipng)
      optipng=$((!optipng))
      ;;
    -p|--parallel)
      parallel=1
      ;;
    -s|--sha)
      check_sha=$((!check_sha))
      ;;
    -z|--zoom)
      zoom=1
      sox_arguments=("-n remix 1 spectrogram -x 500 -y 1025 -z 120 -w Kaiser -S 0:25 -d 0:04")
      ;;
    -?*)
      if [[ "${#1}" -ge "3" && ${1:1:1} != "-" ]]; then
        for (( i=1; i<${#1}; i++ )); do
          if [[ "${1:$i:1}" == "d" ]]; then
            sox_arguments+=( "-n remix 1 spectrogram -x 500 -y 1025 -z 120 -w Kaiser -S 0:25 -d 0:04" )
            continue
          fi
          if [[ "${1:$i:1}" == "l" ]]; then
            offline=$((!offline))
            continue
          fi
          if [[ "${1:$i:1}" == "t" ]]; then
            text_only=$((!text_only))
            continue
          fi
          if [[ "${1:$i:1}" == "o" ]]; then
            optipng=$((!optipng))
            continue
          fi
          if [[ "${1:$i:1}" == "p" ]]; then
            parallel=1
            continue
          fi
          if [[ "${1:$i:1}" == "s" ]]; then
            check_sha=$((!check_sha))
            continue
          fi
          if [[ "${1:$i:1}" == "z" ]]; then
            sox_arguments=("-n remix 1 spectrogram -x 500 -y 1025 -z 120 -w Kaiser -S 0:25 -d 0:04")
            zoom=1
            continue
          fi
          ignored_options="$ignored_options""${1:$i:1}"
          continue
        done
        if [[ -n "$ignored_options" ]]; then
          printf 'WARN: Unknown options (ignored): %s\n' "$ignored_options" >&2
        fi
      else
        printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      fi
      shift 1
      continue
      ;;
    --)              # End of all options.
      shift
      break
      ;;
    *)               # Default case: If no more options then break out of the loop.
      break
  esac
  shift
done

if [[ "$offline" == "1" ]]; then
  mkdir -p "$localdir"
fi

if [[ "$optipng" == "1" ]]; then
  command -v optipng >/dev/null 2>&1 || { echo >&2 "You enabled optipng but it's not installed. Aborting."; exit 1; }
fi

# Check there's at least one argument
if [ "$#" -lt 1 ]; then
  show_help
  exit 1
fi

create_spectrogram () {
  f="${2}"
  if [[ "$3" == "2" ]]; then
    zoom=1
  fi
  # Replace commas for the image name, or curl may cause problems
  output_name="${2//,/_}"
  # Append 'spectrogram.png' to image name, and replace spaces for underscores
  output_name="${output_name// /_}_spectro"
  # Check if this is the second time we run sox for the file, which means it's asking for the zoomed version
  if [[ "$zoom" == "1" ]]; then
    # if [[ "$3" == "2" ]] || [[ "$zoom" == "1" ]]; then
    output_name="${output_name}_zoom"
  fi
  # Append .png
  output_name="${output_name}.png"
  # Use localdir if we want local files
  if [[ "$offline" == "1" ]]; then
    output_name="$localdir"/"$output_name"
  fi
  # Set title
  if [[ "$zoom" == "1" ]]; then
    title="${PWD##*/}/${f}"
  else
    title="${PWD##*/}/$f"
    if [[ "$check_sha" == "1" ]]; then
      title="${title} (SHA $file_sha)"
    fi
  fi
  # Create the spectrogram
  sox "$f" $sox_arg -t "$title" -o "$output_name"
  if [[ "$optipng" == "1" ]]; then optipng -quiet "$output_name"; fi
  if [[ "$offline" == "1" ]]; then
    url="$urlformat"/"${output_name##*/}"
    echo "$url"
  else
    response="$(curl -H "Authorization: CLIENT-ID $apikey" -F "image=@$output_name" \
      https://api.imgur.com/3/image.xml 2>/dev/null | tail -n +2 | sed 's/http:/https:/g' )"
    url="$(echo "$response" | sed -E 's/.*<link>(.*)<\/link>.*/\1/')"
    # Delete spectrogram image, after upload
    rm "$output_name"
    echo "$url"
  fi
}


main (){
  f="$1"
  content="$(file --mime-type "$f")"
  content="${content##* }"
  # Ignore files that aren't mp3, flac or wav
  if ! [[ "${content##* }" == *@(flac|mpeg|wav)* ]]; then
    exit 1
  fi
  # Print name
  if ! [[ "$text_only" == "1" ]]; then
    echo "${f}"
    # print without extension
    # echo "${f%.*}"
  fi
  # Only check hash if set as option. Store it for later use (as sox title & plaintext)
  if [[ "$check_sha" == "1" ]]; then file_sha="$(shasum "$f" | cut -d " " -f 1)"; fi
  # Show hash below name if using images (not text only)
  if [[ "$check_sha" == "1" && ! "$text_only" == "1" ]]; then echo "[size=1]SHA: $file_sha[/size]"; fi
  counter=0
  for sox_arg in "${sox_arguments[@]}"; do
    let counter=counter+1
    if [[ "$text_only" == "1" ]]; then
      echo "[url=$(create_spectrogram "$sox_arg" "$f" "$counter")]${f}[/url]"
      # print without extension
      # echo "[url=$(create_spectrogram "$sox_arg" "$f" "$counter")]${f%.*}[/url]"
    else
      echo "[img]$(create_spectrogram "$sox_arg" "$f" "$counter")[/img]"
    fi
    # Show hash below the URL, for url mode
    if [[ "$check_sha" == "1" && "$text_only" == "1" ]]; then echo "[size=1]SHA: $file_sha[/size]"; fi
    echo
  done
}

if ! [[ "$parallel" == "1" ]]; then printf "[hide=Spectrograms]$align_in[size=3]"; fi
# When input isn't a directory, go through all the arguments and create spectrals only for mp3/flac/wav, ignoring other files
if [[ ! -d "$1" ]]; then
  if [[ -f "$1" ]]; then
    for f in "$@"; do
      main "$f" || continue
    done
  else
    echo "Invalid input."
    show_help
    exit 1
  fi
  # Input exists and is a directory, go through all the audio files to create the spectrograms
else
  if ! cd "$1"; then
    echo "Couldn't access directory. Aborting."
    exit 1
  else
    for f in **/*.{flac,mp3,wav}; do
      main "$f" || continue
    done
  fi
fi
if ! [[ "$parallel" = "1" ]]; then echo "[/size]$align_out[/hide]"; fi
